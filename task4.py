
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'task4.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from pyqtgraph import PlotWidget
import pyqtgraph as pg
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QRect
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage, QImageReader, QColor, QPainterPath
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QFileDialog, QProgressBar
from PyQt5.QtCore import Qt
import numpy as np
from pyqtgraph import PlotWidget
from ImageModel import ImageModel , Modes
from PyQt5.QtWidgets import QGraphicsRectItem,QApplication , QGraphicsPathItem
import functools
from PIL import Image
import cv2

import logging
logger = logging.getLogger()
LOG_FORMAT = " %(message)s"
logging.basicConfig(filename='LOG.txt', level=logging.DEBUG, format=LOG_FORMAT, filemode='w')
from PyQt5.QtWidgets import QGraphicsProxyWidget, QSlider

def create_slider_widget():
    slider = QSlider(Qt.Horizontal)
    slider.setMinimum(0)
    slider.setMaximum(100)
    return slider

def add_slider_to_plot(plot, slider):
    proxy = QGraphicsProxyWidget()
    proxy.setWidget(slider)
    plot.scene().addItem(proxy)
    return proxy

class Ui_MainWindow(object):

    def __init__(self):

            self.flage = 0

            self.min_height, self.min_width = 0, 0

            self.image_ports = []  # Assuming this is a list of image viewports
            self.new_images = []  # List to store modified images


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1321, 783)
        MainWindow.setStyleSheet("background-color: #1b1d23;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: #12171d; border: none; color: #FFFFFF;")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("border-radius: 10px;\n"
"background-color: #12171d; border: none; color: #FFFFFF;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setContentsMargins(9, -1, -1, -1)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(0, -1, -1, -1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Open Sans")
        font.setPointSize(-1)
        # font.setBold(True)
        # font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color:white;\n"
"font-size:20px;\n"
"margin: 0 0 ;")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        font.setFamily("Robota")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.reset1 = QtWidgets.QPushButton(self.frame)
        self.reset1.setText("Reset")
        self.reset1.setFixedSize(40, 30)
        self.reset1.setStyleSheet("background-color: #003366; border: none; color: #FFFFFF; width:80px; height: 30px; border-radius: 10px;}")

        self.reset1.setFont(font)


        self.image1_combo = QtWidgets.QComboBox(self.frame)
        self.image1_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image1_combo.setObjectName("image1_combo")
        self.image1_combo.addItem("")
        self.image1_combo.addItem("")
        self.image1_combo.addItem("")
        self.image1_combo.addItem("")
        self.image1_combo.addItem("")
        self.horizontalLayout.addWidget(self.image1_combo)
        self.horizontalLayout.addWidget(self.reset1)

        self.verticalLayout_3.addLayout(self.horizontalLayout)
#         self.line_10 = QtWidgets.QFrame(self.frame)
#         self.line_10.setStyleSheet("/* Line style */\n"
# "\n"
# "  /* Set the width of the line */\n"
# "  width: 20px;\n"
# "\n"
# "  /* Set the height of the line */\n"
# "  height: 5px;\n"
# "\n"
# "  /* Set the background color of the line */\n"
# "  background-color:rgb(77, 86, 105);\n"
# "\n"
# "  /* Set the border of the line */\n"
# "  border: 10px;\n"
# "\n"
# "  /* Set the border radius of the line */\n"
# "  border-radius:5px;\n"
# "\n"
# "\n"
# "\n"
# "\n"
# "")
#         self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
#         self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
#         self.line_10.setObjectName("line_10")
#         self.verticalLayout_3.addWidget(self.line_10)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")

        self.image1 = PlotWidget(self.frame)
        self.image1.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.image1.setObjectName("image1")

        self.image1.getAxis("bottom").setStyle(showValues=False)
        self.image1.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.image1.getAxis("left").setStyle(showValues=False)
        self.image1.getAxis("left").setVisible(False)


        self.verticalLayout.addWidget(self.image1)
        self.verticalLayout.setStretch(0, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")



        self.graph1 = PlotWidget(self.frame)
        self.graph1.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.graph1.setObjectName("graph1")

        self.graph1.getAxis("bottom").setStyle(showValues=False)
        self.graph1.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.graph1.getAxis("left").setStyle(showValues=False)
        self.graph1.getAxis("left").setVisible(False)

        self.verticalLayout_2.addWidget(self.graph1)
        self.verticalLayout_2.setStretch(0, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.gridLayout.addLayout(self.verticalLayout_3, 0, 0, 1, 1)
        self.verticalLayout_7.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setStyleSheet("border-radius: 10px;\n"
"background-color: #12171d; border: none; color: #FFFFFF;")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_2.setContentsMargins(9, -1, -1, -1)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setContentsMargins(0, -1, -1, -1)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Overpass Black")
        font.setPointSize(-1)
        # font.setBold(True)
        # font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color:white;\n"
"font-size:20px;\n"
"margin: 0 0 ;")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        self.reset2 = QtWidgets.QPushButton(self.frame_2)
        self.reset2.setText("Reset")
        self.reset2.setFixedSize(40, 30)
        self.reset2.setStyleSheet("background-color: #003366; border: none; color: #FFFFFF; width:80px; height: 30px; border-radius: 10px;}")
        font.setFamily("Robota")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.reset2.setFont(font)
        self.image2_combo = QtWidgets.QComboBox(self.frame_2)
        self.image2_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image2_combo.setObjectName("image2_combo")
        self.image2_combo.addItem("")
        self.image2_combo.addItem("")
        self.image2_combo.addItem("")
        self.image2_combo.addItem("")
        self.image2_combo.addItem("")
        self.horizontalLayout_3.addWidget(self.image2_combo)
        self.horizontalLayout_3.addWidget(self.reset2)

        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
#         self.line_12 = QtWidgets.QFrame(self.frame_2)
#         self.line_12.setStyleSheet("/* Line style */\n"
# "\n"
# "  /* Set the width of the line */\n"
# "  width: 20px;\n"
# "\n"
# "  /* Set the height of the line */\n"
# "  height: 5px;\n"
# "\n"
# "  /* Set the background color of the line */\n"
# "  background-color:rgb(77, 86, 105);\n"
# "\n"
# "  /* Set the border of the line */\n"
# "  border: 10px;\n"
# "\n"
# "  /* Set the border radius of the line */\n"
# "  border-radius:5px;\n"
# "\n"
# "\n"
# "\n"
# "\n"
# "")
#         self.line_12.setFrameShape(QtWidgets.QFrame.HLine)
#         self.line_12.setFrameShadow(QtWidgets.QFrame.Sunken)
#         self.line_12.setObjectName("line_12")
#         self.verticalLayout_4.addWidget(self.line_12)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")

        self.image2 = PlotWidget(self.frame_2)
        self.image2.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.image2.setObjectName("image2")
        self.verticalLayout_5.addWidget(self.image2)


        self.image2.getAxis("bottom").setStyle(showValues=False)
        self.image2.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.image2.getAxis("left").setStyle(showValues=False)
        self.image2.getAxis("left").setVisible(False)


        self.verticalLayout_5.setStretch(0, 5)
        self.horizontalLayout_4.addLayout(self.verticalLayout_5)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")



        self.graph2 = PlotWidget(self.frame_2)
        self.graph2.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.graph2.setObjectName("graph2")
        self.verticalLayout_6.addWidget(self.graph2)


        self.graph2.getAxis("bottom").setStyle(showValues=False)
        self.graph2.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.graph2.getAxis("left").setStyle(showValues=False)
        self.graph2.getAxis("left").setVisible(False)


        self.verticalLayout_6.setStretch(0, 5)
        self.horizontalLayout_4.addLayout(self.verticalLayout_6)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.gridLayout_2.addLayout(self.verticalLayout_4, 0, 0, 1, 1)
        self.verticalLayout_7.addWidget(self.frame_2)
        self.gridLayout_6.addLayout(self.verticalLayout_7, 0, 0, 1, 1)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setStyleSheet("border-radius: 10px;\n"
"background-color: #12171d; border: none; color: #FFFFFF;")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_7 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Overpass Black")
        font.setPointSize(-1)
        # font.setBold(True)
        # font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color:white;\n"
"font-size:20px;\n"
"margin: 0 0 ;")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_5.addWidget(self.label_7)
        self.reset3 = QtWidgets.QPushButton(self.frame_3)
        self.reset3.setText("Reset")
        self.reset3.setFixedSize(40, 30)
        self.reset3.setStyleSheet("background-color: #003366; border: none; color: #FFFFFF; width:80px; height: 30px; border-radius: 10px;}")
        font.setFamily("Robota")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.reset3.setFont(font)
        self.image3_combo = QtWidgets.QComboBox(self.frame_3)
        self.image3_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image3_combo.setObjectName("image3_combo")
        self.image3_combo.addItem("")
        self.image3_combo.addItem("")
        self.image3_combo.addItem("")
        self.image3_combo.addItem("")
        self.image3_combo.addItem("")
        self.horizontalLayout_5.addWidget(self.image3_combo)
        self.horizontalLayout_5.addWidget(self.reset3)

        self.verticalLayout_9.addLayout(self.horizontalLayout_5)
#         self.line_11 = QtWidgets.QFrame(self.frame_3)
#         self.line_11.setStyleSheet("/* Line style */\n"
# "\n"
# "  /* Set the width of the line */\n"
# "  width: 20px;\n"
# "\n"
# "  /* Set the height of the line */\n"
# "  height: 5px;\n"
# "\n"
# "  /* Set the background color of the line */\n"
# "  background-color:rgb(77, 86, 105);\n"
# "\n"
# "  /* Set the border of the line */\n"
# "  border: 10px;\n"
# "\n"
# "  /* Set the border radius of the line */\n"
# "  border-radius:5px;\n"
# "\n"
# "\n"
# "\n"
# "\n"
# "")
#         self.line_11.setFrameShape(QtWidgets.QFrame.HLine)
#         self.line_11.setFrameShadow(QtWidgets.QFrame.Sunken)
#         self.line_11.setObjectName("line_11")
#         self.verticalLayout_9.addWidget(self.line_11)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")

        self.image3 = PlotWidget(self.frame_3)
        self.image3.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.image3.setObjectName("image3")
        self.verticalLayout_10.addWidget(self.image3)
        self.verticalLayout_10.setStretch(0, 5)
        self.horizontalLayout_6.addLayout(self.verticalLayout_10)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")

        self.image3.getAxis("bottom").setStyle(showValues=False)
        self.image3.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.image3.getAxis("left").setStyle(showValues=False)
        self.image3.getAxis("left").setVisible(False)




        self.graph3 = PlotWidget(self.frame_3)
        self.graph3.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.graph3.setObjectName("graph3")
        self.verticalLayout_11.addWidget(self.graph3)


        self.graph3.getAxis("bottom").setStyle(showValues=False)
        self.graph3.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.graph3.getAxis("left").setStyle(showValues=False)
        self.graph3.getAxis("left").setVisible(False)


        self.verticalLayout_11.setStretch(0, 5)
        self.horizontalLayout_6.addLayout(self.verticalLayout_11)
        self.verticalLayout_9.addLayout(self.horizontalLayout_6)
        self.gridLayout_3.addLayout(self.verticalLayout_9, 0, 0, 1, 1)
        self.verticalLayout_8.addWidget(self.frame_3)
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setStyleSheet("border-radius: 10px;\n"
"background-color: #12171d; border: none; color: #FFFFFF;")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_10 = QtWidgets.QLabel(self.frame_4)
        font = QtGui.QFont()
        font.setFamily("Overpass Black")
        font.setPointSize(-1)
        # font.setBold(True)
        # font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color:white;\n"
"font-size:20px;\n"
"margin: 0 0 ;")
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_7.addWidget(self.label_10)
        self.reset4 = QtWidgets.QPushButton(self.frame_4)
        self.reset4.setText("Reset")
        self.reset4.setFixedSize(40, 30)
        self.reset4.setStyleSheet("background-color: #003366; border: none; color: #FFFFFF; width:80px; height: 30px; border-radius: 10px;}")
        font.setFamily("Robota")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.reset4.setFont(font)
        self.image4_combo = QtWidgets.QComboBox(self.frame_4)
        self.image4_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image4_combo.setObjectName("image4_combo")
        self.image4_combo.addItem("")
        self.image4_combo.addItem("")
        self.image4_combo.addItem("")
        self.image4_combo.addItem("")
        self.image4_combo.addItem("")
        self.horizontalLayout_7.addWidget(self.image4_combo)
        self.horizontalLayout_7.addWidget(self.reset4)

        self.verticalLayout_12.addLayout(self.horizontalLayout_7)
#         self.line_14 = QtWidgets.QFrame(self.frame_4)
#         self.line_14.setStyleSheet("/* Line style */\n"
# "\n"
# "  /* Set the width of the line */\n"
# "  width: 20px;\n"
# "\n"
# "  /* Set the height of the line */\n"
# "  height: 5px;\n"
# "\n"
# "  /* Set the background color of the line */\n"
# "  background-color:rgb(77, 86, 105);\n"
# "\n"
# "  /* Set the border of the line */\n"
# "  border: 10px;\n"
# "\n"
# "  /* Set the border radius of the line */\n"
# "  border-radius:5px;\n"
# "\n"
# "\n"
# "\n"
# "\n"
# "")
#         self.line_14.setFrameShape(QtWidgets.QFrame.HLine)
#         self.line_14.setFrameShadow(QtWidgets.QFrame.Sunken)
#         self.line_14.setObjectName("line_14")
#         self.verticalLayout_12.addWidget(self.line_14)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")

        self.image4 = PlotWidget(self.frame_4)
        self.image4.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.image4.setObjectName("image4")
        self.verticalLayout_13.addWidget(self.image4)
        self.horizontalLayout_8.addLayout(self.verticalLayout_13)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")


        self.image4.getAxis("bottom").setStyle(showValues=False)
        self.image4.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.image4.getAxis("left").setStyle(showValues=False)
        self.image4.getAxis("left").setVisible(False)





        self.graph4 = PlotWidget(self.frame_4)
        self.graph4.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.graph4.setObjectName("graph4")
        self.verticalLayout_14.addWidget(self.graph4)

        self.graph4.getAxis("bottom").setStyle(showValues=False)
        self.graph4.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.graph4.getAxis("left").setStyle(showValues=False)
        self.graph4.getAxis("left").setVisible(False)


        self.verticalLayout_14.setStretch(0, 5)
        self.horizontalLayout_8.addLayout(self.verticalLayout_14)
        self.verticalLayout_12.addLayout(self.horizontalLayout_8)
        self.gridLayout_4.addLayout(self.verticalLayout_12, 0, 0, 1, 1)
        self.verticalLayout_8.addWidget(self.frame_4)
        self.gridLayout_6.addLayout(self.verticalLayout_8, 0, 1, 1, 1)
        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setStyleSheet("border-radius: 10px;\n"
"background-color: #12171d; border: none; color: #FFFFFF;")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.label_15 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Overpass Black")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("color:white;\n"
"font-size:20px;\n"
"margin: 0 0 ;")
        self.label_15.setObjectName("label_15")
        self.verticalLayout_21.addWidget(self.label_15)
        self.verticalLayout_20 = QtWidgets.QVBoxLayout()
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.output_combo = QtWidgets.QComboBox(self.frame_5)
        self.output_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}\n"
"")
        self.output_combo.setObjectName("output_combo")
        self.output_combo.addItem("")
        self.output_combo.addItem("")
        self.output_combo.addItem("")
        self.horizontalLayout_13.addWidget(self.output_combo)
        self.region_combo = QtWidgets.QComboBox(self.frame_5)
        self.region_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.region_combo.setObjectName("region_combo")
        self.region_combo.addItem("")
        self.region_combo.addItem("")
        self.region_combo.addItem("")
        self.region_combo.addItem("")

        self.horizontalLayout_13.addWidget(self.region_combo)

        self.region_slider = QtWidgets.QSlider(self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.region_slider.sizePolicy().hasHeightForWidth())
        self.region_slider.setSizePolicy(sizePolicy)
        self.region_slider.setFixedSize(300, 20)
        self.region_slider.setOrientation(QtCore.Qt.Horizontal)
        self.region_slider.setObjectName("region_slider")
        self.horizontalLayout_13.addWidget(self.region_slider)

        self.region_slider.setValue(50)



        self.verticalLayout_18.addLayout(self.horizontalLayout_13)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_17 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Oswald SemiBold")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(False)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("color:white;\n"
"font-weight:10000px;")
        self.label_17.setObjectName("label_17")
        self.verticalLayout_17.addWidget(self.label_17)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.image_1_mix_combo = QtWidgets.QComboBox(self.frame_5)
        self.image_1_mix_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius:5px;\n"
"}")
        self.image_1_mix_combo.setObjectName("image_1_mix_combo")
        self.image_1_mix_combo.addItem("")
        self.image_1_mix_combo.addItem("")
        self.image_1_mix_combo.addItem("")
        self.image_1_mix_combo.addItem("")
        self.image_1_mix_combo.addItem("")

        self.image_1_mix_combo.setFixedSize(120, 20)
        self.horizontalLayout_9.addWidget(self.image_1_mix_combo)

        self.image1_slider = QtWidgets.QSlider(self.frame_5)
        self.image1_slider.setFixedSize(450, 20)
        self.image1_slider.setOrientation(QtCore.Qt.Horizontal)
        self.image1_slider.setObjectName("image1_slider")

        self.image1_slider_label = QtWidgets.QLabel(self.frame_5)
        self.horizontalLayout_9.addWidget(self.image1_slider)
        self.horizontalLayout_9.addWidget(self.image1_slider_label, alignment=QtCore.Qt.AlignRight)
        self.image1_slider_label.setFont(font)
        self.image1_slider_label.setStyleSheet("color:white;\n"
"font-weight:77px;")


        self.verticalLayout_17.addLayout(self.horizontalLayout_9)
        self.label_18 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Oswald SemiBold")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(False)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("color:white;\n"
"font-weight:10000px;")
        self.label_18.setObjectName("label_18")
        self.verticalLayout_17.addWidget(self.label_18)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.image2_mix_combo = QtWidgets.QComboBox(self.frame_5)
        self.image2_mix_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image2_mix_combo.setObjectName("image2_mix_combo")
        self.image2_mix_combo.addItem("")
        self.image2_mix_combo.addItem("")
        self.image2_mix_combo.addItem("")
        # self.image2_mix_combo.addItem("")
        # self.image2_mix_combo.addItem("")
        self.image2_mix_combo.setFixedSize(120, 20)
        self.horizontalLayout_10.addWidget(self.image2_mix_combo)
        self.image2_slider = QtWidgets.QSlider(self.frame_5)
        self.image2_slider.setFixedSize(450, 20)
        self.image2_slider.setOrientation(QtCore.Qt.Horizontal)
        self.image2_slider.setObjectName("image2_slider")
        self.image2_slider_label = QtWidgets.QLabel(self.frame_5)
        self.horizontalLayout_10.addWidget(self.image2_slider)
        self.horizontalLayout_10.addWidget(self.image2_slider_label, alignment=QtCore.Qt.AlignRight)
        self.image2_slider_label.setFont(font)
        self.image2_slider_label.setStyleSheet("color:white;\n"
                                               "font-weight:77px;")



        self.verticalLayout_17.addLayout(self.horizontalLayout_10)
        self.label_19 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Oswald SemiBold")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(False)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("color:white;\n"
"font-weight:10000px;")
        self.label_19.setObjectName("label_19")
        self.verticalLayout_17.addWidget(self.label_19)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.image3_mix_combo = QtWidgets.QComboBox(self.frame_5)
        self.image3_mix_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image3_mix_combo.setObjectName("image3_mix_combo")
        self.image3_mix_combo.addItem("")
        self.image3_mix_combo.addItem("")
        self.image3_mix_combo.addItem("")
        # self.image3_mix_combo.addItem("")
        # self.image3_mix_combo.addItem("")
        self.image3_mix_combo.setFixedSize(120, 20)

        self.horizontalLayout_11.addWidget(self.image3_mix_combo)
        self.image3_slider = QtWidgets.QSlider(self.frame_5)
        self.image3_slider.setFixedSize(450, 20)
        self.image3_slider.setOrientation(QtCore.Qt.Horizontal)
        self.image3_slider.setObjectName("image3_slider")
        self.image3_slider_label = QtWidgets.QLabel(self.frame_5)
        self.horizontalLayout_11.addWidget(self.image3_slider)
        self.horizontalLayout_11.addWidget(self.image3_slider_label, alignment=QtCore.Qt.AlignRight)
        self.image3_slider_label.setFont(font)
        self.image3_slider_label.setStyleSheet("color:white;\n"
                                               "font-weight:77px;")
        self.verticalLayout_17.addLayout(self.horizontalLayout_11)
        self.label_20 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Oswald SemiBold")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(False)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color:white;\n"
"font-weight:10000px;")
        self.label_20.setObjectName("label_20")
        self.verticalLayout_17.addWidget(self.label_20)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.image4_mix_combo = QtWidgets.QComboBox(self.frame_5)
        self.image4_mix_combo.setStyleSheet("QComboBox {\n"
"    font-family: \"Overpass\";\n"
"    font-weight: 600; /* Semibold */\n"
"    font-size: 10pt; /* Adjust the font size as needed */\n"
"    color: white; /* Set the text color to white */\n"
"    border: 1px solid white; /* Set the border to 1px solid white */\n"
"background: rgba(74, 74, 74, 0);\n"
"    border-radius: 5px;\n"
"}")
        self.image4_mix_combo.setObjectName("image4_mix_combo")
        self.image4_mix_combo.addItem("")
        self.image4_mix_combo.addItem("")
        self.image4_mix_combo.addItem("")
        # self.image4_mix_combo.addItem("")
        # self.image4_mix_combo.addItem("")
        self.image4_mix_combo.setFixedSize(120, 20)

        self.horizontalLayout_12.addWidget(self.image4_mix_combo)
        self.image4_slider = QtWidgets.QSlider(self.frame_5)
        self.image4_slider.setFixedSize(450, 20)
        self.image4_slider.setOrientation(QtCore.Qt.Horizontal)
        self.image4_slider.setObjectName("image4_slider")
        self.image4_slider_label = QtWidgets.QLabel(self.frame_5)
        self.horizontalLayout_12.addWidget(self.image4_slider)
        self.horizontalLayout_12.addWidget(self.image4_slider_label, alignment=QtCore.Qt.AlignRight)
        self.image4_slider_label.setFont(font)
        self.image4_slider_label.setStyleSheet("color:white;\n"
                                               "font-weight:77px;")
        self.verticalLayout_17.addLayout(self.horizontalLayout_12)
        self.verticalLayout_18.addLayout(self.verticalLayout_17)
        self.verticalLayout_20.addLayout(self.verticalLayout_18)
        self.verticalLayout_19 = QtWidgets.QVBoxLayout()
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")

        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")

        self.output1_widget = PlotWidget(self.frame_5)
        self.output1_widget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.output1_widget.setObjectName("output1_widget")
        self.horizontalLayout_17.addWidget(self.output1_widget)

        self.verticalLayout_16.addLayout(self.horizontalLayout_17)


        self.output1_widget.getAxis("bottom").setStyle(showValues=False)
        self.output1_widget.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.output1_widget.getAxis("left").setStyle(showValues=False)
        self.output1_widget.getAxis("left").setVisible(False)


        self.verticalLayout_16.setStretch(1, 5)
        self.verticalLayout_19.addLayout(self.verticalLayout_16)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")

        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")


        self.output2_widget = PlotWidget(self.frame_5)
        self.output2_widget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.output2_widget.setObjectName("output2_widget")

        self.verticalLayout_22.addWidget(self.output2_widget)

        self.horizontalLayout_17.addLayout(self.verticalLayout_22)
        self.verticalLayout_16.addLayout(self.horizontalLayout_17)

        # self.verticalLayout_15.addWidget(self.output2_widget)

        self.output2_widget.getAxis("bottom").setStyle(showValues=False)
        self.output2_widget.getAxis("bottom").setVisible(False)

        # Hide the y-axis
        self.output2_widget.getAxis("left").setStyle(showValues=False)
        self.output2_widget.getAxis("left").setVisible(False)



        self.verticalLayout_22.setStretch(1, 5)
        self.verticalLayout_19.addLayout(self.verticalLayout_22)

        self.verticalLayout_20.addLayout(self.verticalLayout_19)
        self.verticalLayout_21.addLayout(self.verticalLayout_20)
        self.gridLayout_6.addWidget(self.frame_5, 0, 2, 1, 1)
        self.gridLayout_8.addLayout(self.gridLayout_6, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1321, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.progress_bar = QtWidgets.QProgressBar(self.frame_5)
        self.progress_bar.setGeometry(10, 10, 300, 25)
        self.progress_bar.setStyleSheet(
                "QProgressBar { text-align: center; color: black; }"
                 "QProgressBar::chunk {margin-top: 0px; margin-bottom: 0px; background-color: white; }"
        )

        font.setFamily("Oswald SemiBold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.progress_bar.setFont(font)
        self.apply = QtWidgets.QPushButton(self.frame_5)
        self.apply.setText("Apply")
        self.apply.setFixedSize(50, 30)
        self.apply.setStyleSheet("background-color: #003366; border: none; color: #FFFFFF; width:80px; height: 30px; border-radius: 10px;}")
        self.apply.setFont(font)
        # self.verticalLayout_17.addWidget(self.apply)
        #
        self.horizontalLayout_15.addWidget(self.progress_bar)
        self.horizontalLayout_15.addWidget(self.apply)

        self.verticalLayout_17.addLayout(self.horizontalLayout_15)
        # self.verticalLayout_17.addWidget(self.apply, alignment=QtCore.Qt.AlignRight)

        self.frame_5.setFixedSize(700,670)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.ui_combobox = [self.image1_combo, self.image2_combo, self.image3_combo, self.image4_combo]
        self.ui_widget = [self.image1,self.image2,self.image3,self.image4,
                          self.graph1, self.graph2, self.graph3, self.graph4,
                          self.output1_widget,self.output2_widget]
        self.ui_sliders = [self.image1_slider, self.image2_slider,self.image3_slider,self.image4_slider]
        self.ui_sliders_label = [self.image1_slider_label, self.image2_slider_label,
                                 self.image3_slider_label,self.image4_slider_label]

        self.ui_mix_combo=[self.image_1_mix_combo,self.image2_mix_combo,self.image3_mix_combo,self.image4_mix_combo]
        self.reset=[self.reset1,self.reset2,self.reset3,self.reset4]
        self.images = [None, None, None, None]
        self.height=[]
        self.width=[]
        self.min_width=0
        self.min_height=0

        self.image1.scene().sigMouseClicked.connect(lambda event: self.check_double_click(event, 0))
        self.image2.scene().sigMouseClicked.connect(lambda event: self.check_double_click(event, 1))
        self.image3.scene().sigMouseClicked.connect(lambda event: self.check_double_click(event, 2))
        self.image4.scene().sigMouseClicked.connect(lambda event: self.check_double_click(event, 3))

        self.ui_mix_combo[0].setCurrentIndex(0)
        self.ui_mix_combo[1].setCurrentIndex(1)
        self.ui_mix_combo[2].setCurrentIndex(0)
        self.ui_mix_combo[3].setCurrentIndex(0)
        self.ui_mix_combo[0].currentIndexChanged.connect(lambda n: self.handle_mix_combo(n, 1, 2, 3))

        self.last_brightness_factor = 1.0
        self.last_contrast_factor = 1.0

        self.previous_x = 0
        self.previous_y = 0

        self.reset1.clicked.connect(self.reset_brightness_and_contrast)
        self.region_combo.currentIndexChanged.connect(self.draw_region)
        self.region_slider.valueChanged.connect(self.draw_region)
        self.apply.clicked.connect(self.mixing)

        self.region_slider.setMinimum(1)
        self.region_slider.setMaximum(99)
        self.region_slider.setValue(50)
        # self.progress_bar.setValue(100)


        for i in range(len(self.reset)):
                self.reset[i].clicked.connect(lambda value, index=i: self.reset_brightness_and_contrast(index))

        for i in range(len(self.ui_combobox)):
            self.connect_img_combo(i)


        for i in range(len(self.ui_sliders)):
            self.ui_sliders[i].setMinimum(0)
            self.ui_sliders[i].setMaximum(100)
            self.ui_sliders[i].setTickInterval(1)
            self.ui_sliders[i].valueChanged.connect(lambda value, index=i: self.slider_value(index))



        for index, image_widget in enumerate([self.image1, self.image2, self.image3, self.image4]):
                # Connect the signal using functools.partial to pass additional arguments
                image_widget.scene().sigMouseMoved.connect(functools.partial(self.mouse_moved, index))



    def reset_brightness_and_contrast(self,index):
            # # Reset brightness and contrast to their initial values
            initial_brightness = 1.0  # Set your initial brightness value here
            initial_contrast = 1.0  # Set your initial contrast value here
            self.update_brightness(initial_brightness, index)
            self.update_contrast(initial_contrast, index)

    def slider_value(self,index):
            self.ui_sliders_label[index].setText(str(self.ui_sliders[index].value())+"%")


    def check_double_click(self, event, index):
            if event.double():
                    # This is a double-click event
                    self.browse_image(event, index)


    def mouse_moved(self, index, pos):
            self.ui_images = self.ui_widget[:4]

            if self.ui_widget[index].sceneBoundingRect().contains(pos):
                    # Check if the event occurred within the plot widget's boundaries
                    if QApplication.mouseButtons() == Qt.LeftButton:
                            print("curr pressed")
                            # Get the mouse position relative to the plot widget
                            x, y = pos.x(), pos.y()
                            brightness_factor = 1-y / 200
                            contrast_factor = x / 200
                            self.update_brightness((brightness_factor +1), index)
                            self.update_contrast((contrast_factor + 1), index)


    def update_brightness(self, value, index):
            logger.debug('update brightness of image {}'.format(index + 1))
            brightness_factor = value
            image = self.images[index]
            image =image.brightness(brightness_factor, self.last_contrast_factor)
            self.last_brightness_factor = brightness_factor
            self.display_image(index, image.img_data)
            self.display_image(index + 4, 20 * np.log10(image.attrs[self.ui_combobox[index].currentIndex()]))

    def update_contrast(self, value, index):
            logger.debug('update contrast of image {}'.format(index + 1))
            # Update the brightness of the image and its Fourier transform component
            contrast_factor = value  # Convert the slider value to a factor between -1 and 1
            image = self.images[index]
            image=image.contrast(contrast_factor,self.last_brightness_factor)
            self.last_contrast_factor = contrast_factor
            self.display_image(index, image.img_data)
            self.display_image(index + 4, 20 * np.log10(image.attrs[self.ui_combobox[index].currentIndex()]))
    def connect_img_combo(self, i):
         self.ui_combobox[i].currentIndexChanged.connect(lambda n:self.display_ft_component(i, n))

    def update_mix_combo(self, current_index, indices, items):
            for index in indices:
                    self.ui_mix_combo[index].blockSignals(True)
                    self.ui_mix_combo[index].clear()
                    self.ui_mix_combo[index].addItems(items)
                    self.ui_mix_combo[index].blockSignals(False)

    def handle_mix_combo(self, current_index, index1, index2, index3):
            logger.debug('Handling mixer combobox')

            if current_index in [0, 1]:
                    self.update_mix_combo(current_index, [index1, index2, index3], ["Magnitude", "Phase"])
            elif current_index in [2, 3]:
                    self.update_mix_combo(current_index, [index1, index2, index3], ["Real", "Imaginary"])


    def mixing(self):
            logger.debug('Start Mixing ')
            img_index = [i for i in range(len(self.images))]  # image index for each component
            sliderval = np.array([self.ui_sliders[i].value() / 100 for i in range(len(self.ui_sliders))])

            self.progress_bar.setValue(20)

            mixed_images = []

            for i in range(4):
                    if self.ui_mix_combo[i].currentText() == "Magnitude":
                            mix_mode = Modes.magnitude
                            self.progress_bar.setValue(30)

                    elif self.ui_mix_combo[i].currentText() =="Phase":
                            mix_mode = Modes.phase
                            self.progress_bar.setValue(30)

                    elif self.ui_mix_combo[i].currentText() == "Real":
                            mix_mode = Modes.real
                            self.progress_bar.setValue(30)

                    else:
                            mix_mode = Modes.Imaginary
                            self.progress_bar.setValue(30)

                    mix = self.images[img_index[i]].mixer( sliderval[i],mix_mode,self.region_combo.currentIndex(),self.region_slider.value())
                    self.progress_bar.setValue(50)

                    mixed_images.append(mix)

                    self.progress_bar.setValue(60)

            final_mix = mixed_images[0]  # Initialize with the first mixed image

            for i in range(1, 4):
                    final_mix += mixed_images[i]
                    self.progress_bar.setValue(70)


            output = self.output_combo.currentIndex()
            self.progress_bar.setValue(100)

            self.display_image(output + 8, final_mix)


    def display_ft_component(self, img_index, attribute):

            if attribute == 0:
                        self.display_image(img_index+4 , 20 * np.log10(self.images[img_index].attrs[0]))
                        logger.debug('Display Magnitude of Image {} '.format(img_index + 1))

            else:
                    logger.debug(
                            'Display {} of Image {} '.format(self.ui_combobox[img_index].currentText(), img_index + 1))

                    self.display_image(img_index+4 , self.images[img_index].attrs[attribute])

    def display_image(self, index, data):
        logger.debug('Display image')

        self.ui_widget[index].clear()
        img = pg.ImageItem()
        self.ui_widget[index].addItem(img)
        # Disable mouse interaction for the view box
        self.ui_widget[index].getViewBox().setMouseEnabled(x=False, y=False)

        self.ui_widget[index].setXRange(min=0, max=data.shape[0], padding=1)
        self.ui_widget[index].setYRange(min=0, max=data.shape[1], padding=1)
        img.setImage(data.T)
        self.ui_widget[index].autoRange(padding=0)

    def draw_region(self):
            logger.debug('Draw selected {} region'.format(self.region_combo.currentText()))
            for i in range(4):
                    self.images[i].set_region_parameters(self.region_combo.currentText(),
                                                        self.region_slider.value())
            for i in range(4):
                    items = self.ui_widget[i + 4].items()
                    for item in items:
                            if isinstance(item, QGraphicsPathItem):
                                    self.ui_widget[i + 4].removeItem(item)


            # Initialize a rectangle covering the entire image

            for i in range(4):

                    self.image_width, self.image_height = self.images[i].img_data.shape[0], \
                    self.images[i].img_data.shape[1]
                    scene_path = QPainterPath()
                    scene_path.addRect(0, 0, self.image_width, self.image_height)

                    start_row, end_row, start_col, end_col = self.images[i].get_selected_region(
                            self.images[i].img_data.shape)
                    rect_path = QPainterPath()
                    rect_path.addRect(start_col, start_row, end_col - start_col, end_row - start_row)
                    if self.region_combo.currentText() == "outer":

                            # Subtract the drawn rectangles from the scene rectangle
                            scene_path = scene_path.subtracted(rect_path)

                            # Create a rectangle covering the area outside the drawn rectangles
                            complement_rect = QGraphicsPathItem(scene_path)
                            complement_rect.setBrush(QColor(0, 0, 255, 100))  # Blue with 100 (semi-transparent) alpha
                            complement_rect.setPen(QColor(0, 0, 255, 100))

                            self.ui_widget[i + 4].addItem(complement_rect)  # Add the complement rectangle to a specific widget
                    elif self.region_combo.currentText() == "inner":
                            rect_path = QGraphicsPathItem(rect_path)
                            rect_path.setBrush(QColor(255, 0, 0, 100))  # Blue with 100 (semi-transparent) alpha
                            rect_path.setPen(QColor(255, 0, 0, 100))
                            self.ui_widget[i + 4].addItem(rect_path)  # Add the complement rectangle to a specific widget
                    else:
                            for i in range(4):
                                    items = self.ui_widget[i + 4].items()
                                    for item in items:
                                            if isinstance(item, QGraphicsPathItem):
                                                    self.ui_widget[i + 4].removeItem(item)

    def browse_image(self, event, index):
            logger.debug('Add Image {} '.format(index + 1))
            file_filter = "Raw Data (*.png *.jpg *.jpeg)"
            image_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                    None, 'Open Signal File', './', filter=file_filter)


            # Create an ImageModel object
            image = ImageModel(url=image_path)
            self.images[index] = image
            self.images[index].img_data = np.flipud(self.images[index].img_data)
            # Get the width and height of the image
            height, width = self.images[index].img_data.shape
            self.height.append(height)
            self.width.append(width)
            self.min_width = min(self.width)
            self.min_height = min(self.height)

                    # Resize all images to minimum size
            for i in range(len(self.images)):
                    self.images[i]=self.images[i].resize_image(self.min_width,self.min_height)
                    self.display_image(index, self.images[index].img_data)
                    self.display_image(index + 4, 20 * np.log10(self.images[index].attrs[0]))

            # return min_width, min_height


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Image 1"))
        # self.image1_combo.setItemText(0, _translate("MainWindow", "Choose Component"))
        self.image1_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image1_combo.setItemText(1, _translate("MainWindow", "Phase"))
        self.image1_combo.setItemText(2, _translate("MainWindow", "Real"))
        self.image1_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_4.setText(_translate("MainWindow", "Image 2"))
        # self.image2_combo.setItemText(0, _translate("MainWindow", "Choose Component"))
        self.image2_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image2_combo.setItemText(1, _translate("MainWindow", "Phase"))
        self.image2_combo.setItemText(2, _translate("MainWindow", "Real"))
        self.image2_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_7.setText(_translate("MainWindow", "Image 3"))
        # self.image3_combo.setItemText(0, _translate("MainWindow", "Choose Component"))
        self.image3_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image3_combo.setItemText(1, _translate("MainWindow", "Phase"))
        self.image3_combo.setItemText(2, _translate("MainWindow", "Real"))
        self.image3_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_10.setText(_translate("MainWindow", "Image 4"))
        # self.image4_combo.setItemText(0, _translate("MainWindow", "Choose component"))
        self.image4_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image4_combo.setItemText(1, _translate("MainWindow", "Phase"))
        self.image4_combo.setItemText(2, _translate("MainWindow", "Real"))
        self.image4_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_15.setAlignment(Qt.AlignCenter)
        self.label_15.setText(_translate("MainWindow", "Image Mixer"))
        # self.output_combo.setItemText(0, _translate("MainWindow", "Output"))
        self.output_combo.setItemText(0, _translate("MainWindow", "Output 1"))
        self.output_combo.setItemText(1, _translate("MainWindow", "Output 2"))
        self.region_combo.setItemText(0, _translate("MainWindow", "Region"))
        self.region_combo.setItemText(1, _translate("MainWindow", "inner"))
        self.region_combo.setItemText(2, _translate("MainWindow", "outer"))
        # self.region_combo.setItemText(3, _translate("MainWindow", "AllRegion"))

        self.label_17.setText(_translate("MainWindow", " Image 1"))
        # self.image_1_mix_combo.setItemText(0, _translate("MainWindow", "choose"))
        self.image_1_mix_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image_1_mix_combo.setItemText(1, _translate("MainWindow", "Phase"))
        self.image_1_mix_combo.setItemText(2, _translate("MainWindow", "Real"))
        self.image_1_mix_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_18.setText(_translate("MainWindow", " Image 2"))
        # self.image2_mix_combo.setItemText(0, _translate("MainWindow", "choose"))
        self.image2_mix_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image2_mix_combo.setItemText(1, _translate("MainWindow", "Phase"))
        # self.image2_mix_combo.setItemText(2, _translate("MainWindow", "Real"))
        # self.image2_mix_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_19.setText(_translate("MainWindow", " Image 3"))
        # self.image3_mix_combo.setItemText(0, _translate("MainWindow", "choose"))
        self.image3_mix_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image3_mix_combo.setItemText(1, _translate("MainWindow", "Phase"))
        # self.image3_mix_combo.setItemText(2, _translate("MainWindow", "Real"))
        # self.image3_mix_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        self.label_20.setText(_translate("MainWindow", " Image 4"))
        # self.image4_mix_combo.setItemText(0, _translate("MainWindow", "choose"))
        self.image4_mix_combo.setItemText(0, _translate("MainWindow", "Magnitude"))
        self.image4_mix_combo.setItemText(1, _translate("MainWindow", "Phase"))
        # self.image4_mix_combo.setItemText(2, _translate("MainWindow", "Real"))
        # self.image4_mix_combo.setItemText(3, _translate("MainWindow", "Imaginary"))
        # self.label_14.setText(_translate("MainWindow", "Output 1"))
        # self.label_13.setText(_translate("MainWindow", "Output 2"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
